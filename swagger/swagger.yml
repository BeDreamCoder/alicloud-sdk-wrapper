swagger: "2.0"
info:
  title: Zig Cloud API
  description: Manage IaaS Resources
  version: 1.0.0
  termsOfService: http://zhigui.com
  contact:
    email: fanjiahe@zhigui.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /cloud/runinstances:
    post:
      tags:
      - cloud
      description: run instances
      operationId: CloudController.RunInstances
      parameters:
      - in: body
        name: body
        description: body content
        required: true
        schema:
          $ref: '#/definitions/commons.RunInstancesRequest'
      responses:
        "200":
          description: '{}'
        "403":
          description: ""
  /cloud/securitygroup:
    post:
      tags:
      - cloud
      description: create SecurityGroup
      operationId: CloudController.CreateSecurityGroup
      parameters:
      - in: body
        name: body
        description: body content
        required: true
        schema:
          $ref: '#/definitions/commons.CreateSecurityGroupRequest'
      responses:
        "200":
          description: '{}'
        "403":
          description: ""
  /cloud/vpc:
    post:
      tags:
      - cloud
      description: create VPC
      operationId: CloudController.CreateVPC
      parameters:
      - in: body
        name: body
        description: body content
        required: true
        schema:
          $ref: '#/definitions/commons.CreateVpcRequest'
      responses:
        "200":
          description: '{}'
        "403":
          description: ""
  /cloud/vswitch:
    post:
      tags:
      - cloud
      description: create VSwitch
      operationId: CloudController.CreateVSwitch
      parameters:
      - in: body
        name: body
        description: body content
        required: true
        schema:
          $ref: '#/definitions/commons.CreateVSwitchRequest'
      responses:
        "200":
          description: '{}'
        "403":
          description: ""
  /user/:
    get:
      tags:
      - user
      description: get all Users
      operationId: UserController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
    post:
      tags:
      - user
      description: create users
      operationId: UserController.CreateUser
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: '{int} models.User.Id'
        "403":
          description: body is empty
  /user/{id}:
    get:
      tags:
      - user
      description: get user by uid
      operationId: UserController.Get
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :id is empty
    put:
      tags:
      - user
      description: update the user
      operationId: UserController.Update
      parameters:
      - in: path
        name: id
        description: The uid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :id is not int
  /user/{uid}:
    delete:
      tags:
      - user
      description: delete the user
      operationId: UserController.Delete
      parameters:
      - in: path
        name: uid
        description: The uid you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: uid is empty
  /user/login:
    get:
      tags:
      - user
      description: Logs user into the system
      operationId: UserController.Login
      parameters:
      - in: query
        name: username
        description: The username for login
        required: true
        type: string
      - in: query
        name: password
        description: The password for login
        required: true
        type: string
      responses:
        "200":
          description: '{string} login success'
        "403":
          description: user not exist
  /user/logout:
    get:
      tags:
      - user
      description: Logs out current logged in user session
      operationId: UserController.logout
      responses:
        "200":
          description: '{string} logout success'
definitions:
  commons.CreateSecurityGroupRequest:
    title: CreateSecurityGroupRequest
    type: object
    properties:
      SecurityGroupName:
        type: string
      VpcId:
        type: string
  commons.CreateVSwitchRequest:
    title: CreateVSwitchRequest
    type: object
    properties:
      CidrBlock:
        type: string
      VSwitchName:
        type: string
      VpcId:
        type: string
      ZoneId:
        type: string
  commons.CreateVpcRequest:
    title: CreateVpcRequest
    type: object
    properties:
      CidrBlock:
        type: string
      RegionId:
        type: string
      VpcName:
        type: string
  commons.RunInstancesRequest:
    title: RunInstancesRequest
    type: object
    properties:
      Amount:
        type: string
      ImageId:
        type: string
      InstanceChargeType:
        type: string
      InstanceType:
        type: string
      SecurityGroupId:
        type: string
      VSwitchId:
        type: string
      VpcId:
        type: string
  models.User:
    title: User
    type: object
    properties:
      Id:
        type: integer
        format: int64
      Password:
        type: string
      Username:
        type: string
tags:
- name: user
  description: |
    Operations about Users
